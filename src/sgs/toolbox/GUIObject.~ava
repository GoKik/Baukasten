package toolbox;

import processing.core.*;
import processing.opengl.*;
import processing.javafx.*;
import processing.event.*;
import processing.data.*;
import processing.awt.*;
import java.util.ArrayList;

public abstract class GUIObject implements PConstants {
  protected int xPos, yPos, oldX, oldY, width, height, oldX2, oldY2;
  protected PApplet parent;
  protected boolean resizable[] = {true, true, true, true};
  protected boolean keepPropotions = false;
  protected float propotion;         
  private ArrayList<Object> values;
  private ArrayList<String> tags;
  private ArrayList<PropertyListener> propertyListeners;
  
  
  public GUIObject(PApplet p, int x, int y) {
    this(p, x, y, 10, 10);
  }
  
  public GUIObject(PApplet p, int x, int y, int w, int h) {
    parent = p;
    xPos = oldX = x;
    yPos = oldY = y;
    oldX2 = xPos + w;
    oldY2 = yPos + h;
    width = w;
    height = h;
    propotion = (float)w / h;
    values = new ArrayList<Object>();
    tags = new ArrayList<String>();
    propertyListeners = new ArrayList<PropertyListener>();
    addProperty("X", xPos);
    addProperty("Y", yPos);
    addProperty("Width", width);   
    addProperty("Height", height);  
    addProperty("X-Resizable", resizable[0]);
    addProperty("Y-Resizable", resizable[1]);
    addProperty("W-Resizable", resizable[2]);
    addProperty("H-Resizable", resizable[3]);
    addProperty("Keep Propotions", keepPropotions);
  }     
  
  protected Object getCurrentPropertyValue(String tag, int number) {
    switch (number) {
      case 0 : return xPos;
      case 1 : return yPos;
      case 2 : return width;
      case 3 : return height;
      case 4 : return resizable[0];
      case 5 : return resizable[1];
      case 6 : return resizable[2];
      case 7 : return resizable[3];
      case 8 : return keepPropotions;
      default: return null;
    } // end of switch
  }
  
  protected void updateProperty(String tag, int number, Object value) {
    switch (number) {
      case 0 : xPos = (int)value;
      break;
      case 1 : yPos = (int)value;
      break;
      case 2 : width = (int)value;
      break;
      case 3 : height = (int)value;
      break;
      case 4 : resizable[0] = (boolean)value;
      break;
      case 5 : resizable[1] = (boolean)value;
      break;
      case 6 : resizable[2] = (boolean)value;
      break;
      case 7 : resizable[3] = (boolean)value;
      break;
      case 8 : keepPropotions = (boolean)value;
      break;
    } // end of switch
    onFixSize();
  }
  
  public abstract void draw();
  public abstract boolean mouseEvent(MouseEvent e);
  public abstract void keyEvent(KeyEvent e);
  
  public void onResize(float xFactor, float yFactor) {
    if (resizable[0]) {
      xPos = (int)(oldX * xFactor);
    } // end of if     
    if (resizable[1]) {
      yPos = (int)(oldY * yFactor);
    } // end of if
    if (resizable[2]) {
      width = (int)(oldX2 * xFactor) - xPos;
      if (width < 0) {
        width = 0;
      } // end of if
    } // end of if
    if (resizable[3]) {
      if (keepPropotions) {
        if (resizable[2]) {
          height = (int)(width * (1/propotion));
          if (yPos + height > parent.height) {
            height = parent.height - yPos; 
            width = (int)(height * propotion);   
          } // end of if
        } else {
          height = (int)(oldY2 * yFactor) - yPos;
          width = (int)(height * propotion);   
          if (xPos + width > parent.width) {
            width = parent.width - xPos; 
            height = (int)(width * (1/propotion));  
          } // end of if
        } // end of if-else
      } else {
        height = (int)(oldY2 * yFactor) - yPos;
      } // end of if-else
      if (height < 0) {
        height = 0;
      } // end of if
    } // end of if
  }
  
  public void onFixSize() {
    oldX = xPos;
    oldX2 = xPos + width;
    oldY = yPos;
    oldY2 = yPos + height;
  }
  
  public void setResizable(boolean r) {
    setResizable(r, r, r, r, r);
  }
  
  public void setResizable(boolean r, boolean p) {
    setResizable(r, r, r, r, p);
  }
  
  public void setResizable(boolean r1, boolean r2, boolean p) {
    setResizable(r1, r2, r1, r2, p);
  }
  
  public void setResizable(boolean x, boolean y, boolean w, boolean h) {
    setResizable(x, y, w, h, false);
  }
  
  public void setResizable(boolean x, boolean y, boolean w, boolean h, boolean p) {
    resizable[0] = x;
    resizable[1] = y;
    resizable[2] = w;
    resizable[3] = h;
    keepPropotions = p;
  }
  
  public int getX() {
    return xPos;
  }
  
  public int getY() {
    return yPos;
  }
  
  public int getWidth() {
    return width;
  }
  
  public int getHeight() {
    return height;
  }
  
  public void setX(int x) {
    xPos = x;
    onFixSize();
  }
  
  public void setY(int y) {
    yPos = y;     
    onFixSize();
  }
  
  public void setWidth(int w) {
    width = w; 
    onFixSize();
  }
  
  public void setHeight(int h) {
    height = h; 
    onFixSize();
  }
  
  public ArrayList<String> getPropertyTags() {
    return tags;
  }
  
  public ArrayList<Object> getPropertyValues() {
    return values;
  }
  
  public interface PropertyListener {
    public void onPropertyChanged(String tag, Object value);
  }
  
  public void addPropertyListener(PropertyListener l) {
    propertyListeners.add(l);
  }
  
  protected void addProperty(String tag, Object value) {
    tags.add(tag);
    values.add(value);
  }
  
  public void setProperty(String tag, Object value) {
    for (int i = 0; i < tags.size(); i++) {
      if (tags.get(i).equals(tag) && value.getClass() == values.get(i).getClass()) {
        updateProperty(tag, i, value);
        values.set(i, getCurrentPropertyValue(tag, tags.indexOf(tag)));
        if (propertyListeners.size() > 0) {
          for (int j = 0; j < propertyListeners.size(); j++) {
            propertyListeners.get(j).onPropertyChanged(tags.get(i), value);
          } // end of for
        } // end of if
      } // end of if
    } // end of for
  }
  
  protected void checkProperties() {
    for (int i = 0; i < tags.size(); i++) { 
      Object o = getCurrentPropertyValue(tags.get(i), i);
      if (o != null && !o.equals(values.get(i))) {
        values.set(i, o);
        if (propertyListeners.size() > 0) {
          for (int h = 0; h < propertyListeners.size(); h++) {
            propertyListeners.get(h).onPropertyChanged(tags.get(i), values.get(i));
          } // end of for
        } // end of if
      } // end of if
    } // end of for
  }      
  
  
}